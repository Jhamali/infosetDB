#!/usr/bin/env python3

"""Infoset ingest cache daemon.

Extracts agent data from cache directory files.

"""

# Standard libraries
import sys
import os
import time

# Infoset libraries
try:
    from infoset.agents import agent as Agent
except:
    print('You need to set your PYTHONPATH to include the infoset library')
    sys.exit(2)
from infoset.cache import cache
from infoset.utils import daemon
from infoset.utils import log
from infoset.utils import configuration


class PollingAgent(object):
    """Infoset agent that gathers data.

    Args:
        None

    Returns:
        None

    Functions:
        __init__:
        populate:
        post:
    """

    def __init__(self):
        """Method initializing the class.

        Args:
            config_dir: Configuration directory

        Returns:
            None

        """
        # Initialize key variables
        self.agent_name = 'ingestd'

    def name(self):
        """Return agent name.

        Args:
            None

        Returns:
            value: Name of agent

        """
        # Return
        value = self.agent_name
        return value

    def query(self):
        """Query all remote devices for data.

        Args:
            None

        Returns:
            None

        """
        # Read the config
        config = configuration.Config()

        # Check for lock and pid files
        lockfile = daemon.lock_file(self.agent_name)
        if os.path.exists(lockfile) is True:
            log_message = (
                'Ingest lock file %s exists. Multiple ingest daemons running '
                'or lots of cache files to ingest. Ingester may have died '
                'catastrophically in the past and no new files will be '
                'ingested unless the stale lockfile is deleted.'
                '') % (lockfile)
            log.log2see(1073, log_message)

        pidfile = daemon.pid_file(self.agent_name)
        if os.path.exists(pidfile) is True:
            log_message = (
                'PID file: %s already exists. Daemon already running? '
                'If not, it may have died catastrophically in the past '
                'in which case you should use --stop --force to fix.'
                '') % (pidfile)
            log.log2see(1075, log_message)

        # Do the daemon thing
        while True:
            # Update the PID file timestamp (important)
            daemon.update_pid(self.name())
            cache.process(config, self.agent_name)
            time.sleep(5)


def main():
    """Process agent data.

    Args:
        None

    Returns:
        None

    """
    # Get configuration
    cli = Agent.AgentCLI()
    poller = PollingAgent()

    # Do control
    cli.control(poller)


if __name__ == "__main__":
    main()
